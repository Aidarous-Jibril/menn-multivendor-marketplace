# ---------- CI ----------
ci:
  name: ci (${{ matrix.id }})
  runs-on: ubuntu-latest
  strategy:
    matrix:
      include:
        - id: backend
          dir: backend
        - id: frontend
          dir: frontend
        - id: frontend-admin
          dir: frontend-admin
  steps:
    - uses: actions/checkout@v4

    - name: Setup Node 20 (with npm cache)
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm
        cache-dependency-path: ${{ matrix.dir }}/package-lock.json

    - name: Install
      working-directory: ${{ matrix.dir }}
      run: npm ci

    - name: Lint (if present)
      working-directory: ${{ matrix.dir }}
      run: npm run -s lint || true

    - name: Typecheck (if present)
      working-directory: ${{ matrix.dir }}
      run: npm run -s typecheck || true

    - name: Build (if present)
      working-directory: ${{ matrix.dir }}
      env:
        # harmless for backend; needed for Next during CI builds
        NEXT_PUBLIC_API_URL: /api
      run: npm run -s build || true

# ---------- Build & Push to GHCR ----------
build-and-push:
  needs: ci
  if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
  runs-on: ubuntu-latest
  strategy:
    matrix:
      include:
        - app: backend
          context: ./backend
          file: ./backend/Dockerfile.prod
        - app: frontend
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          build_args: |
            NEXT_PUBLIC_API_URL=/api
        - app: frontend_admin
          context: ./frontend-admin
          file: ./frontend-admin/Dockerfile.prod
          build_args: |
            NEXT_PUBLIC_API_URL=/api
        - app: edge
          context: ./edge
          file: ./edge/Dockerfile
  steps:
    - uses: actions/checkout@v4

    - name: Derive owner/tags
      run: |
        echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_ENV"
        echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_ENV"
        SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '--')
        echo "BRANCH_TAG=$SAFE_BRANCH" >> "$GITHUB_ENV"

    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & push ${{ matrix.app }}
      uses: docker/build-push-action@v6
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.file }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ env.OWNER_LC }}/menn-multivendor-marketplace-${{ matrix.app }}:latest
          ghcr.io/${{ env.OWNER_LC }}/menn-multivendor-marketplace-${{ matrix.app }}:${{ env.BRANCH_TAG }}
          ghcr.io/${{ env.OWNER_LC }}/menn-multivendor-marketplace-${{ matrix.app }}:${{ env.SHORT_SHA }}
        build-args: ${{ matrix.build_args }}
        provenance: false
        sbom: false

# ---------- Deploy (compose pinned to SHA) ----------
deploy-azure:
  needs: build-and-push
  if: github.ref == 'refs/heads/main'
  runs-on: ubuntu-latest
  env:
    AZURE_RG: tsmern-rg
    AZURE_WEBAPP: tsmern-webapp-aidarous
  steps:
    - uses: actions/checkout@v4

    - name: Azure login (service principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create compose.yaml (pinned)
      run: |
        SHA=${GITHUB_SHA::7}
        OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}
        cat > compose.yaml <<EOF
        version: "3.9"
        services:
          edge:
            image: ghcr.io/${OWNER_LC}/menn-multivendor-marketplace-edge:${SHA}
            depends_on: [backend, frontend, frontend_admin]
            restart: unless-stopped
            expose: ["80"]
          backend:
            image: ghcr.io/${OWNER_LC}/menn-multivendor-marketplace-backend:${SHA}
            restart: unless-stopped
            environment:
              NODE_ENV: production
              PORT: "8000"
              MONGO_URI: \${MONGO_URI}
              JWT_SECRET: \${JWT_SECRET}
              SMTP_SERVICE: \${SMTP_SERVICE}
              SMTP_PORT: \${SMTP_PORT}
              SMTP_EMAIL: \${SMTP_EMAIL}
              SMTP_PASSWORD: \${SMTP_PASSWORD}
              CLOUD_NAME: \${CLOUD_NAME}
              CLOUDINARY_API_KEY: \${CLOUDINARY_API_KEY}
              CLOUDINARY_API_SECRET: \${CLOUDINARY_API_SECRET}
            expose: ["8000"]
          frontend:
            image: ghcr.io/${OWNER_LC}/menn-multivendor-marketplace-frontend:${SHA}
            restart: unless-stopped
            environment:
              NODE_ENV: production
              PORT: "3000"
            expose: ["3000"]
          frontend_admin:
            image: ghcr.io/${OWNER_LC}/menn-multivendor-marketplace-frontend_admin:${SHA}
            restart: unless-stopped
            environment:
              NODE_ENV: production
              PORT: "3001"
            expose: ["3001"]
        EOF
        echo "Using images:"; grep 'image:' compose.yaml

    - name: Apply compose to Web App
      uses: azure/cli@v2
      with:
        inlineScript: |
          az webapp config container set \
            -g "$AZURE_RG" -n "$AZURE_WEBAPP" \
            --multicontainer-config-type compose \
            --multicontainer-config-file "./compose.yaml"

    - name: Restart & smoke test
      uses: azure/cli@v2
      with:
        inlineScript: |
          az webapp restart -g "$AZURE_RG" -n "$AZURE_WEBAPP"
          URL="https://$(az webapp show -g "$AZURE_RG" -n "$AZURE_WEBAPP" --query defaultHostName -o tsv)/api/health"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i: $code"
            [ "$code" = "200" ] && exit 0
            sleep 5
          done
          echo "Smoke test failed"; exit 1
